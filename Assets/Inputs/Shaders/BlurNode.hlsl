#ifndef BLUR_INCLUDED
#define BLUR_INCLUDED

static float2 sample_points[961] = { 
float2(-15, -15), float2(-14, -15), float2(-13, -15), float2(-12, -15), float2(-11, -15), float2(-10, -15), float2(-9, -15), float2(-8, -15), float2(-7, -15), float2(-6, -15), float2(-5, -15), float2(-4, -15), float2(-3, -15), float2(-2, -15), float2(-1, -15), float2(0, -15), float2(1, -15), float2(2, -15), float2(3, -15), float2(4, -15), float2(5, -15), float2(6, -15), float2(7, -15), float2(8, -15), float2(9, -15), float2(10, -15), float2(11, -15), float2(12, -15), float2(13, -15), float2(14, -15), float2(15, -15), 
float2(-15, -14), float2(-14, -14), float2(-13, -14), float2(-12, -14), float2(-11, -14), float2(-10, -14), float2(-9, -14), float2(-8, -14), float2(-7, -14), float2(-6, -14), float2(-5, -14), float2(-4, -14), float2(-3, -14), float2(-2, -14), float2(-1, -14), float2(0, -14), float2(1, -14), float2(2, -14), float2(3, -14), float2(4, -14), float2(5, -14), float2(6, -14), float2(7, -14), float2(8, -14), float2(9, -14), float2(10, -14), float2(11, -14), float2(12, -14), float2(13, -14), float2(14, -14), float2(15, -14), 
float2(-15, -13), float2(-14, -13), float2(-13, -13), float2(-12, -13), float2(-11, -13), float2(-10, -13), float2(-9, -13), float2(-8, -13), float2(-7, -13), float2(-6, -13), float2(-5, -13), float2(-4, -13), float2(-3, -13), float2(-2, -13), float2(-1, -13), float2(0, -13), float2(1, -13), float2(2, -13), float2(3, -13), float2(4, -13), float2(5, -13), float2(6, -13), float2(7, -13), float2(8, -13), float2(9, -13), float2(10, -13), float2(11, -13), float2(12, -13), float2(13, -13), float2(14, -13), float2(15, -13), 
float2(-15, -12), float2(-14, -12), float2(-13, -12), float2(-12, -12), float2(-11, -12), float2(-10, -12), float2(-9, -12), float2(-8, -12), float2(-7, -12), float2(-6, -12), float2(-5, -12), float2(-4, -12), float2(-3, -12), float2(-2, -12), float2(-1, -12), float2(0, -12), float2(1, -12), float2(2, -12), float2(3, -12), float2(4, -12), float2(5, -12), float2(6, -12), float2(7, -12), float2(8, -12), float2(9, -12), float2(10, -12), float2(11, -12), float2(12, -12), float2(13, -12), float2(14, -12), float2(15, -12), 
float2(-15, -11), float2(-14, -11), float2(-13, -11), float2(-12, -11), float2(-11, -11), float2(-10, -11), float2(-9, -11), float2(-8, -11), float2(-7, -11), float2(-6, -11), float2(-5, -11), float2(-4, -11), float2(-3, -11), float2(-2, -11), float2(-1, -11), float2(0, -11), float2(1, -11), float2(2, -11), float2(3, -11), float2(4, -11), float2(5, -11), float2(6, -11), float2(7, -11), float2(8, -11), float2(9, -11), float2(10, -11), float2(11, -11), float2(12, -11), float2(13, -11), float2(14, -11), float2(15, -11), 
float2(-15, -10), float2(-14, -10), float2(-13, -10), float2(-12, -10), float2(-11, -10), float2(-10, -10), float2(-9, -10), float2(-8, -10), float2(-7, -10), float2(-6, -10), float2(-5, -10), float2(-4, -10), float2(-3, -10), float2(-2, -10), float2(-1, -10), float2(0, -10), float2(1, -10), float2(2, -10), float2(3, -10), float2(4, -10), float2(5, -10), float2(6, -10), float2(7, -10), float2(8, -10), float2(9, -10), float2(10, -10), float2(11, -10), float2(12, -10), float2(13, -10), float2(14, -10), float2(15, -10), 
float2(-15, -9), float2(-14, -9), float2(-13, -9), float2(-12, -9), float2(-11, -9), float2(-10, -9), float2(-9, -9), float2(-8, -9), float2(-7, -9), float2(-6, -9), float2(-5, -9), float2(-4, -9), float2(-3, -9), float2(-2, -9), float2(-1, -9), float2(0, -9), float2(1, -9), float2(2, -9), float2(3, -9), float2(4, -9), float2(5, -9), float2(6, -9), float2(7, -9), float2(8, -9), float2(9, -9), float2(10, -9), float2(11, -9), float2(12, -9), float2(13, -9), float2(14, -9), float2(15, -9), 
float2(-15, -8), float2(-14, -8), float2(-13, -8), float2(-12, -8), float2(-11, -8), float2(-10, -8), float2(-9, -8), float2(-8, -8), float2(-7, -8), float2(-6, -8), float2(-5, -8), float2(-4, -8), float2(-3, -8), float2(-2, -8), float2(-1, -8), float2(0, -8), float2(1, -8), float2(2, -8), float2(3, -8), float2(4, -8), float2(5, -8), float2(6, -8), float2(7, -8), float2(8, -8), float2(9, -8), float2(10, -8), float2(11, -8), float2(12, -8), float2(13, -8), float2(14, -8), float2(15, -8), 
float2(-15, -7), float2(-14, -7), float2(-13, -7), float2(-12, -7), float2(-11, -7), float2(-10, -7), float2(-9, -7), float2(-8, -7), float2(-7, -7), float2(-6, -7), float2(-5, -7), float2(-4, -7), float2(-3, -7), float2(-2, -7), float2(-1, -7), float2(0, -7), float2(1, -7), float2(2, -7), float2(3, -7), float2(4, -7), float2(5, -7), float2(6, -7), float2(7, -7), float2(8, -7), float2(9, -7), float2(10, -7), float2(11, -7), float2(12, -7), float2(13, -7), float2(14, -7), float2(15, -7), 
float2(-15, -6), float2(-14, -6), float2(-13, -6), float2(-12, -6), float2(-11, -6), float2(-10, -6), float2(-9, -6), float2(-8, -6), float2(-7, -6), float2(-6, -6), float2(-5, -6), float2(-4, -6), float2(-3, -6), float2(-2, -6), float2(-1, -6), float2(0, -6), float2(1, -6), float2(2, -6), float2(3, -6), float2(4, -6), float2(5, -6), float2(6, -6), float2(7, -6), float2(8, -6), float2(9, -6), float2(10, -6), float2(11, -6), float2(12, -6), float2(13, -6), float2(14, -6), float2(15, -6), 
float2(-15, -5), float2(-14, -5), float2(-13, -5), float2(-12, -5), float2(-11, -5), float2(-10, -5), float2(-9, -5), float2(-8, -5), float2(-7, -5), float2(-6, -5), float2(-5, -5), float2(-4, -5), float2(-3, -5), float2(-2, -5), float2(-1, -5), float2(0, -5), float2(1, -5), float2(2, -5), float2(3, -5), float2(4, -5), float2(5, -5), float2(6, -5), float2(7, -5), float2(8, -5), float2(9, -5), float2(10, -5), float2(11, -5), float2(12, -5), float2(13, -5), float2(14, -5), float2(15, -5), 
float2(-15, -4), float2(-14, -4), float2(-13, -4), float2(-12, -4), float2(-11, -4), float2(-10, -4), float2(-9, -4), float2(-8, -4), float2(-7, -4), float2(-6, -4), float2(-5, -4), float2(-4, -4), float2(-3, -4), float2(-2, -4), float2(-1, -4), float2(0, -4), float2(1, -4), float2(2, -4), float2(3, -4), float2(4, -4), float2(5, -4), float2(6, -4), float2(7, -4), float2(8, -4), float2(9, -4), float2(10, -4), float2(11, -4), float2(12, -4), float2(13, -4), float2(14, -4), float2(15, -4), 
float2(-15, -3), float2(-14, -3), float2(-13, -3), float2(-12, -3), float2(-11, -3), float2(-10, -3), float2(-9, -3), float2(-8, -3), float2(-7, -3), float2(-6, -3), float2(-5, -3), float2(-4, -3), float2(-3, -3), float2(-2, -3), float2(-1, -3), float2(0, -3), float2(1, -3), float2(2, -3), float2(3, -3), float2(4, -3), float2(5, -3), float2(6, -3), float2(7, -3), float2(8, -3), float2(9, -3), float2(10, -3), float2(11, -3), float2(12, -3), float2(13, -3), float2(14, -3), float2(15, -3), 
float2(-15, -2), float2(-14, -2), float2(-13, -2), float2(-12, -2), float2(-11, -2), float2(-10, -2), float2(-9, -2), float2(-8, -2), float2(-7, -2), float2(-6, -2), float2(-5, -2), float2(-4, -2), float2(-3, -2), float2(-2, -2), float2(-1, -2), float2(0, -2), float2(1, -2), float2(2, -2), float2(3, -2), float2(4, -2), float2(5, -2), float2(6, -2), float2(7, -2), float2(8, -2), float2(9, -2), float2(10, -2), float2(11, -2), float2(12, -2), float2(13, -2), float2(14, -2), float2(15, -2), 
float2(-15, -1), float2(-14, -1), float2(-13, -1), float2(-12, -1), float2(-11, -1), float2(-10, -1), float2(-9, -1), float2(-8, -1), float2(-7, -1), float2(-6, -1), float2(-5, -1), float2(-4, -1), float2(-3, -1), float2(-2, -1), float2(-1, -1), float2(0, -1), float2(1, -1), float2(2, -1), float2(3, -1), float2(4, -1), float2(5, -1), float2(6, -1), float2(7, -1), float2(8, -1), float2(9, -1), float2(10, -1), float2(11, -1), float2(12, -1), float2(13, -1), float2(14, -1), float2(15, -1), 
float2(-15, 0), float2(-14, 0), float2(-13, 0), float2(-12, 0), float2(-11, 0), float2(-10, 0), float2(-9, 0), float2(-8, 0), float2(-7, 0), float2(-6, 0), float2(-5, 0), float2(-4, 0), float2(-3, 0), float2(-2, 0), float2(-1, 0), float2(0, 0), float2(1, 0), float2(2, 0), float2(3, 0), float2(4, 0), float2(5, 0), float2(6, 0), float2(7, 0), float2(8, 0), float2(9, 0), float2(10, 0), float2(11, 0), float2(12, 0), float2(13, 0), float2(14, 0), float2(15, 0), 
float2(-15, 1), float2(-14, 1), float2(-13, 1), float2(-12, 1), float2(-11, 1), float2(-10, 1), float2(-9, 1), float2(-8, 1), float2(-7, 1), float2(-6, 1), float2(-5, 1), float2(-4, 1), float2(-3, 1), float2(-2, 1), float2(-1, 1), float2(0, 1), float2(1, 1), float2(2, 1), float2(3, 1), float2(4, 1), float2(5, 1), float2(6, 1), float2(7, 1), float2(8, 1), float2(9, 1), float2(10, 1), float2(11, 1), float2(12, 1), float2(13, 1), float2(14, 1), float2(15, 1), 
float2(-15, 2), float2(-14, 2), float2(-13, 2), float2(-12, 2), float2(-11, 2), float2(-10, 2), float2(-9, 2), float2(-8, 2), float2(-7, 2), float2(-6, 2), float2(-5, 2), float2(-4, 2), float2(-3, 2), float2(-2, 2), float2(-1, 2), float2(0, 2), float2(1, 2), float2(2, 2), float2(3, 2), float2(4, 2), float2(5, 2), float2(6, 2), float2(7, 2), float2(8, 2), float2(9, 2), float2(10, 2), float2(11, 2), float2(12, 2), float2(13, 2), float2(14, 2), float2(15, 2), 
float2(-15, 3), float2(-14, 3), float2(-13, 3), float2(-12, 3), float2(-11, 3), float2(-10, 3), float2(-9, 3), float2(-8, 3), float2(-7, 3), float2(-6, 3), float2(-5, 3), float2(-4, 3), float2(-3, 3), float2(-2, 3), float2(-1, 3), float2(0, 3), float2(1, 3), float2(2, 3), float2(3, 3), float2(4, 3), float2(5, 3), float2(6, 3), float2(7, 3), float2(8, 3), float2(9, 3), float2(10, 3), float2(11, 3), float2(12, 3), float2(13, 3), float2(14, 3), float2(15, 3), 
float2(-15, 4), float2(-14, 4), float2(-13, 4), float2(-12, 4), float2(-11, 4), float2(-10, 4), float2(-9, 4), float2(-8, 4), float2(-7, 4), float2(-6, 4), float2(-5, 4), float2(-4, 4), float2(-3, 4), float2(-2, 4), float2(-1, 4), float2(0, 4), float2(1, 4), float2(2, 4), float2(3, 4), float2(4, 4), float2(5, 4), float2(6, 4), float2(7, 4), float2(8, 4), float2(9, 4), float2(10, 4), float2(11, 4), float2(12, 4), float2(13, 4), float2(14, 4), float2(15, 4), 
float2(-15, 5), float2(-14, 5), float2(-13, 5), float2(-12, 5), float2(-11, 5), float2(-10, 5), float2(-9, 5), float2(-8, 5), float2(-7, 5), float2(-6, 5), float2(-5, 5), float2(-4, 5), float2(-3, 5), float2(-2, 5), float2(-1, 5), float2(0, 5), float2(1, 5), float2(2, 5), float2(3, 5), float2(4, 5), float2(5, 5), float2(6, 5), float2(7, 5), float2(8, 5), float2(9, 5), float2(10, 5), float2(11, 5), float2(12, 5), float2(13, 5), float2(14, 5), float2(15, 5), 
float2(-15, 6), float2(-14, 6), float2(-13, 6), float2(-12, 6), float2(-11, 6), float2(-10, 6), float2(-9, 6), float2(-8, 6), float2(-7, 6), float2(-6, 6), float2(-5, 6), float2(-4, 6), float2(-3, 6), float2(-2, 6), float2(-1, 6), float2(0, 6), float2(1, 6), float2(2, 6), float2(3, 6), float2(4, 6), float2(5, 6), float2(6, 6), float2(7, 6), float2(8, 6), float2(9, 6), float2(10, 6), float2(11, 6), float2(12, 6), float2(13, 6), float2(14, 6), float2(15, 6), 
float2(-15, 7), float2(-14, 7), float2(-13, 7), float2(-12, 7), float2(-11, 7), float2(-10, 7), float2(-9, 7), float2(-8, 7), float2(-7, 7), float2(-6, 7), float2(-5, 7), float2(-4, 7), float2(-3, 7), float2(-2, 7), float2(-1, 7), float2(0, 7), float2(1, 7), float2(2, 7), float2(3, 7), float2(4, 7), float2(5, 7), float2(6, 7), float2(7, 7), float2(8, 7), float2(9, 7), float2(10, 7), float2(11, 7), float2(12, 7), float2(13, 7), float2(14, 7), float2(15, 7), 
float2(-15, 8), float2(-14, 8), float2(-13, 8), float2(-12, 8), float2(-11, 8), float2(-10, 8), float2(-9, 8), float2(-8, 8), float2(-7, 8), float2(-6, 8), float2(-5, 8), float2(-4, 8), float2(-3, 8), float2(-2, 8), float2(-1, 8), float2(0, 8), float2(1, 8), float2(2, 8), float2(3, 8), float2(4, 8), float2(5, 8), float2(6, 8), float2(7, 8), float2(8, 8), float2(9, 8), float2(10, 8), float2(11, 8), float2(12, 8), float2(13, 8), float2(14, 8), float2(15, 8), 
float2(-15, 9), float2(-14, 9), float2(-13, 9), float2(-12, 9), float2(-11, 9), float2(-10, 9), float2(-9, 9), float2(-8, 9), float2(-7, 9), float2(-6, 9), float2(-5, 9), float2(-4, 9), float2(-3, 9), float2(-2, 9), float2(-1, 9), float2(0, 9), float2(1, 9), float2(2, 9), float2(3, 9), float2(4, 9), float2(5, 9), float2(6, 9), float2(7, 9), float2(8, 9), float2(9, 9), float2(10, 9), float2(11, 9), float2(12, 9), float2(13, 9), float2(14, 9), float2(15, 9), 
float2(-15, 10), float2(-14, 10), float2(-13, 10), float2(-12, 10), float2(-11, 10), float2(-10, 10), float2(-9, 10), float2(-8, 10), float2(-7, 10), float2(-6, 10), float2(-5, 10), float2(-4, 10), float2(-3, 10), float2(-2, 10), float2(-1, 10), float2(0, 10), float2(1, 10), float2(2, 10), float2(3, 10), float2(4, 10), float2(5, 10), float2(6, 10), float2(7, 10), float2(8, 10), float2(9, 10), float2(10, 10), float2(11, 10), float2(12, 10), float2(13, 10), float2(14, 10), float2(15, 10), 
float2(-15, 11), float2(-14, 11), float2(-13, 11), float2(-12, 11), float2(-11, 11), float2(-10, 11), float2(-9, 11), float2(-8, 11), float2(-7, 11), float2(-6, 11), float2(-5, 11), float2(-4, 11), float2(-3, 11), float2(-2, 11), float2(-1, 11), float2(0, 11), float2(1, 11), float2(2, 11), float2(3, 11), float2(4, 11), float2(5, 11), float2(6, 11), float2(7, 11), float2(8, 11), float2(9, 11), float2(10, 11), float2(11, 11), float2(12, 11), float2(13, 11), float2(14, 11), float2(15, 11), 
float2(-15, 12), float2(-14, 12), float2(-13, 12), float2(-12, 12), float2(-11, 12), float2(-10, 12), float2(-9, 12), float2(-8, 12), float2(-7, 12), float2(-6, 12), float2(-5, 12), float2(-4, 12), float2(-3, 12), float2(-2, 12), float2(-1, 12), float2(0, 12), float2(1, 12), float2(2, 12), float2(3, 12), float2(4, 12), float2(5, 12), float2(6, 12), float2(7, 12), float2(8, 12), float2(9, 12), float2(10, 12), float2(11, 12), float2(12, 12), float2(13, 12), float2(14, 12), float2(15, 12), 
float2(-15, 13), float2(-14, 13), float2(-13, 13), float2(-12, 13), float2(-11, 13), float2(-10, 13), float2(-9, 13), float2(-8, 13), float2(-7, 13), float2(-6, 13), float2(-5, 13), float2(-4, 13), float2(-3, 13), float2(-2, 13), float2(-1, 13), float2(0, 13), float2(1, 13), float2(2, 13), float2(3, 13), float2(4, 13), float2(5, 13), float2(6, 13), float2(7, 13), float2(8, 13), float2(9, 13), float2(10, 13), float2(11, 13), float2(12, 13), float2(13, 13), float2(14, 13), float2(15, 13), 
float2(-15, 14), float2(-14, 14), float2(-13, 14), float2(-12, 14), float2(-11, 14), float2(-10, 14), float2(-9, 14), float2(-8, 14), float2(-7, 14), float2(-6, 14), float2(-5, 14), float2(-4, 14), float2(-3, 14), float2(-2, 14), float2(-1, 14), float2(0, 14), float2(1, 14), float2(2, 14), float2(3, 14), float2(4, 14), float2(5, 14), float2(6, 14), float2(7, 14), float2(8, 14), float2(9, 14), float2(10, 14), float2(11, 14), float2(12, 14), float2(13, 14), float2(14, 14), float2(15, 14), 
float2(-15, 15), float2(-14, 15), float2(-13, 15), float2(-12, 15), float2(-11, 15), float2(-10, 15), float2(-9, 15), float2(-8, 15), float2(-7, 15), float2(-6, 15), float2(-5, 15), float2(-4, 15), float2(-3, 15), float2(-2, 15), float2(-1, 15), float2(0, 15), float2(1, 15), float2(2, 15), float2(3, 15), float2(4, 15), float2(5, 15), float2(6, 15), float2(7, 15), float2(8, 15), float2(9, 15), float2(10, 15), float2(11, 15), float2(12, 15), float2(13, 15), float2(14, 15), float2(15, 15), 
};

static float blur_matrix[961] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

static float blur_coefficient = 0.0014347202295552368f;

static float2 screen = {1920, 1080};

SamplerState sampler_Color;

void Blur_float(float Amount, float2 UV, UnityTexture2D Color, UnitySamplerState SS, out float3 Out)
{
    float3 blur = {0, 0, 0};
    
    [unroll] for (int i = 0; i < 961; i++)
    {
        float3 rgb = Color.Sample(SS, UV + sample_points[i] / screen * Amount);
        blur += rgb * blur_matrix[i] * blur_coefficient;
    }

    Out = blur;
}

#endif